# Generated by Django 3.2 on 2021-04-10 12:15

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=40, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', flags=re.RegexFlag['IGNORECASE'], message='Wrong Username, Try Again.[Max Length: 40 characters, Must Start With: 4 Characters, Allowed: Alphanumeric, Underscore]', regex='^[a-z]{4,}\\w+')], verbose_name='Username')),
                ('usernumber', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='invalid', message='Calling Code Required[EX: +44]  And Up to 15 digits', regex='^\\+[0-9]{4,15}$')], verbose_name='Telephone Number')),
                ('first_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator(code='invalid', flags=re.RegexFlag['IGNORECASE'], message='Wrong Name, Try Again.[Max Length: 150 characters, Must Have At Least 2 characters.]', regex='^[a-z]{2,}+$')], verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator(code='invalid', flags=re.RegexFlag['IGNORECASE'], message='Wrong Name, Try Again.[Max Length: 150 characters, Must Have At Least 2 characters.]', regex='^[a-z]{2,}+$')], verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='date joined')),
                ('date_birthday', models.DateTimeField(verbose_name='Date Of Birth:')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.MyUserManager()),
            ],
        ),
    ]
